[gd_scene load_steps=6 format=2]

[ext_resource path="res://assets/scripts/Holdable.gd" type="Script" id=1]

[sub_resource type="ConvexPolygonShape" id=1]
points = PoolVector3Array( -1, 1, 1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, -1, -1, -1, 1, 1, 1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, -1, -1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1 )

[sub_resource type="CubeMesh" id=2]

[sub_resource type="Shader" id=3]
code = "shader_type spatial;

uniform vec4 portal_plane = vec4(0.0, 0.0, 0.0, 0.0);

bool portal_culls(vec3 vertex, mat4 cam, mat4 world) {
	vec3 pos = (inverse(world) * cam * vec4(vertex, 1.0)).xyz;
	return dot(portal_plane.xyz, pos) < portal_plane.w;
}

void fragment() {
	if (portal_culls(VERTEX, CAMERA_MATRIX, WORLD_MATRIX)) {
		discard;
	}
	ALBEDO = vec3(1.0, 0.0, 0.0);
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/portal_plane = Plane( 0, 0, 0, 0 )

[node name="Cube" type="RigidBody"]
contacts_reported = 8
contact_monitor = true
script = ExtResource( 1 )

[node name="CollisionShape" type="CollisionShape" parent="."]
shape = SubResource( 1 )

[node name="MeshInstance" type="MeshInstance" parent="."]
mesh = SubResource( 2 )
material/0 = SubResource( 4 )
